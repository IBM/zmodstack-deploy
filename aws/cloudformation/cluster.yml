AWSTemplateFormatVersion: "2010-09-09"
Description: IBM Z and Cloud Modernization Stack - OCP Cluster
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying into an new VPC"
    Order: "2"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: IBM Z and Cloud Modernization Stack configuration
        Parameters:
          - LicenseAgreement
          - APIKey
          - S3BucketName
      - Label:
          default: Network configuration
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - BootNodeInstanceType
          - BootNodeAccessCIDR
      - Label:
          default: DNS configuration
        Parameters:
          - DomainName
      - Label:
          default: OpenShift hosts configuration
        Parameters:
          - NumberOfControlPlaneNode
          - NumberOfCompute
          - ControlPlaneNodeInstanceType
          - ComputeInstanceType
          - ClusterName
          - PrivateCluster
          - OpenshiftVersion
          - OpenshiftUsername
          - OpenshiftPassword
      - Label:
          default: IBM Z and Cloud Modernization Stack resources
        Parameters:
          - ZosCloudBroker
          - ZosConnect
          - WaziDevspaces
          - WaziDevspacesVersion
      
    ParameterLabels:
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      PublicSubnet3ID:
        default: Public subnet 3 ID
      BootNodeAccessCIDR:
        default: Boot node external access CIDR
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      S3BucketName:
        default: S3 Bucket Name
      NumberOfAZs: 
        default: Number of Availability Zones
      AvailabilityZones:
        default: Availability Zones
      BootNodeInstanceType:
        default: Boot node instance type
      ControlPlaneNodeInstanceType:
        default: ControlPlaneNode instance type
      ComputeInstanceType:
        default: Compute instance type
      NumberOfControlPlaneNode:
        default: Number of control plane nodes
      NumberOfCompute:
        default: Number of compute nodes
      DomainName:
        default: Domain name
      ClusterName:
        default: Cluster name
      OpenshiftVersion:
        default: Choos Openshift Version
      OpenshiftUsername:
        default: Choose username to login to Openshift Console
      OpenshiftPassword:
        default: Choose password to login to Openshift Console
      PrivateCluster:
        default: Disable external endpoints of your cluster
      LicenseAgreement:
        default: License agreement
      APIKey:
        default: IBM Container Registry API or Entitlement Key
      ZosCloudBroker:
        default: Install IBM z/OS Cloud Broker
      ZosConnect:
        default: Install IBM z/OS Connect
      WaziDevspaces:
        default: Install IBM Wazi DevSpaces
      WaziDevspacesVersion:
        default: Version of IBM Wazi DevSpaces 

Parameters:
  APIKey:
    Description: The API key to access IBM Container Registry.
    Type: String
    NoEcho: 'true'
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone 1 for the workload (e.g., subnet-a0246dcd).
    Type: String
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the workload (e.g., subnet-b1f432cd).
    Type: String
  PrivateSubnet3ID:
    Description: The ID of the private subnet in Availability Zone 3 for the workload (e.g., subnet-b1f4a2cd).
    Type: String
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: String
  PublicSubnet2ID:
    Description: The ID of the public subnet in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e).
    Type: String
  PublicSubnet3ID:
    Description: The ID of the public subnet in Availability Zone 3 for the ELB load balancer (e.g., subnet-e324ad8e).
    Type: String
  BootNodeInstanceType:
    Default: t3.xlarge
    AllowedValues:
      - t3.xlarge
      - t3a.xlarge
      - m4.xlarge
      - m5.xlarge
      - m5a.xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the Bootnode that acts as a bastion.
    Type: String
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
  S3BucketName: 
    Description: The name of the S3 bucket containing the OpenShift pull secret (zmodstack/ocp/pull-secret.json) and where deployment logs will be written (zmodstack/logs). Reference the IBM Z and Cloud Modernization Stack on AWS Deployment Guide for more details.
    Type: String
    AllowedPattern: ^[0-9a-z-]*$
    Default: ""
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: The CIDR block of the existing VPC.
    Type: String
  VPCID:
    Description: The ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
  ControlPlaneNodeInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift master/control plane nodes instances.
    Type: String
  ComputeInstanceType:
    Default: m5.large
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift compute instances.
    Type: String
  NumberOfAZs:
    Default: 3
    Description: >-
      The number of Availability Zones to be used for the deployment. Keep in mind that some regions may be limited to two Availability Zones. For a single OCP cluster to be highly available, three Availability Zones are needed to avoid a single point of failure when using three, five, or seven master/control plane nodes. With fewer than three Availability Zones, one of the AZs will have more master/control plane nodes.
    Type: Number
    AllowedValues:
    - 1
    - 3
  AvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC. The Template uses one or three Availability Zones and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfControlPlaneNode:
    Default: '3'
    Description: The desired capacity for the OpenShift master/control plane node instances. Must be an odd number.A minimum of 3 is required.
    Type: String
    AllowedPattern: '^[3579]$|(^[3-9]+[3579]$)'
  NumberOfCompute:
    Default: '3'
    Description: The desired capacity for the OpenShift compute instances. Minimum of 3 nodes required. If the number of compute instances exceeds your Red Hat entitlement limits or AWS instance limits, the stack will fail. Choose a number that is within your limits.
    Type: Number
  DomainName:
    Description: 'Amazon Route53 base domain configured for your OpenShift Container Platform cluster. Name must consist of lower case alphanumeric characters and must start and end with an alphanumeric character.'
    Type: String
    AllowedPattern: '^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$'
    ConstraintDescription: Must enter a valid Domain Name
  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/tags.
    Type: String
    AllowedPattern: ^[0-9A-Za-z-]*$
  PrivateCluster:
    Description: To Deploy a Private cluster select true and false for Public cluster
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  OpenshiftVersion:
    Description: Choose Openshift Version
    Type: String
    Default: ""
  OpenshiftUsername:
    Description: Username to be used to login to Openshift Console
    Type: String
  OpenshiftPassword:
    Description: Password to be used to login to Openshift Console
    Type: String
    NoEcho: 'true'
  ZosCloudBroker:
    Description: Install IBM z/OS Cloud Broker
    Default: true
    Type: String
    AllowedValues: [true, false]
  ZosConnect:
    Description: Install IBM z/OS Connect
    Default: true
    Type: String
    AllowedValues: [true, false]
  WaziDevspaces:
    Description: Install IBM Wazi DevSpaces
    Default: true
    Type: String
    AllowedValues: [true, false]
  WaziDevspacesVersion:
    Description: Version of IBM Wazi DevSpaces
    Type: String
    Default: "3.x"
    AllowedValues:
      - "3.x"
      - "2.x"
  LicenseAgreement:
    Description: >-
      I have read and agreed to the license terms for IBM Z and Cloud Modernization Stack that were provided to me at time of purchase.
    Type: String
    Default: '-'
    AllowedValues:
      - I agree
      - '-'
    ConstraintDescription: must answer 'I agree'

Mappings:
  AWSAMIRegionMap:
    us-east-1:
      BootNodeAmiId: ami-0bc11f21e54e85f01
    us-east-2:
      BootNodeAmiId: ami-09ed350985c60bc04
    us-west-1:
      BootNodeAmiId: ami-0324869512d5f379d
    us-west-2:
      BootNodeAmiId: ami-0047a1b414fb751d2
    ca-central-1:
      BootNodeAmiId: ami-0c3d3a230b9668c02
    eu-central-1:
      BootNodeAmiId: ami-0e7e134863fac4946
    eu-west-1:
      BootNodeAmiId: ami-0f0f1c02e5e4d9d9f
    eu-west-2:
      BootNodeAmiId: ami-035c5dc086849b5de
    eu-west-3:
      BootNodeAmiId: ami-0460bf124812bebfa
    eu-north-1:
      BootNodeAmiId: ami-06a2a41d455060f8b


Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Conditions:
  3AZConditionCheck: !Equals [!Ref NumberOfAZs, '3']
  AcceptLicense: !Equals [!Ref LicenseAgreement, 'I agree']
  WaziDevspacesCheck: !Equals [true, !Ref WaziDevspaces]

Resources:
  KeyPairName:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref ClusterName
      Tags:
        - Key: Name
          Value: !Ref ClusterName
  IAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  IAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref IAMUser
  OpenshiftSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"apikey":"${APIKey}", "ocpUsername":"${OpenshiftUsername}", "ocpPassword":"${OpenshiftPassword}"}'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: lambda-cleanUpLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:PutParameter
                  - ssm:GetParameter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*_CleanupStatus'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'

  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
      - PolicyName: bootnode-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:CreateTags"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:UpdateSecret"
            Resource:
            - !Ref AWSCredentialSecret
            - !Ref OpenshiftSecret
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !Sub arn:aws:s3:::${S3BucketName}
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${S3BucketName}/*
          - Effect: Allow
            Action:
            - ssm:SendCommand
            - ssm:PutParameter
            - ssm:GetParameter
            Resource:
            - '*'

  OpenshiftURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-OpenshiftURL"
      Type: String
      Value: !Sub "https://console-openshift-console.apps.${ClusterName}.${DomainName}"

  WaziDevspacesURL:
    Type: AWS::SSM::Parameter
    Condition: WaziDevspacesCheck
    Properties:
      Name: !Sub "${AWS::StackName}-WaziDevspacesURL"
      Type: String
      Value: !Sub "https://eclipse-che.apps.${ClusterName}.${DomainName}"

  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"

  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      - IpProtocol: tcp
        FromPort: 9443
        ToPort: 9443
        CidrIp: !Ref BootNodeAccessCIDR
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCID

  AWSCredentialSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub
        - '{"aws_secret_access_key":"${IAMUserAccessKey}", "aws_access_key_id":"${IAMUserSecret}"}'
        - {IAMUserAccessKey: !Ref IAMUserAccessKey, IAMUserSecret: !GetAtt [IAMUserAccessKey, SecretAccessKey]}

  BootnodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile
        StackPropertiesFile:
          files:
            /mnt/destroy.sh:
              content: |
                echo "$1 - Destroy"
                /mnt/openshift/zmodstack-deploy/ocp/ansible/playbooks/installer-workspace/openshift-install destroy cluster --dir=/mnt/openshift/zmodstack-deploy/ocp/ansible/playbooks/installer-workspace --log-level=debug
                aws ssm put-parameter --name $1"_CleanupStatus" --type "String" --value "READY" --overwrite
              mode: '000777'
            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
            /root/.aws/credentials:
              content:
                !Sub
                - |
                  [default]
                  aws_access_key_id=${IAMUserAccessKey}
                  aws_secret_access_key=${IAMUserSecret}
                -
                  IAMUserAccessKey: !Ref IAMUserAccessKey
                  IAMUserSecret: !GetAtt [IAMUserAccessKey, SecretAccessKey]
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", BootNodeAmiId]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      Tags:
        - Key: Name
          Value:
            !Sub
            - "${ClusterName}-bootnode"
            - ClusterName: !Ref ClusterName
      InstanceType: !Ref BootNodeInstanceType
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1ID
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x

            # Global exports
            export HOME=~
            export InstallCompleteURL='${InstallCompleteHandle}'
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}

            # Add /usr/local/bin to global PATH
            echo "export PATH=$PATH:/usr/local/bin" >> /etc/bashrc
            # Install basic yum pre-reqs
            yum update -y
            yum install -y git wget python38 yum-utils httpd-tools unzip

            # Install AWS v2 CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -u awscliv2.zip -d awscliv2
            ./awscliv2/aws/install
            aws --version

            # Install AWS SSM Agent
            wget https://s3-us-west-1.amazonaws.com/amazon-ssm-us-west-1/latest/linux_amd64/amazon-ssm-agent.rpm
            yum install -y ./amazon-ssm-agent.rpm
            systemctl start amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            rm -f ./amazon-ssm-agent.rpm

            # Tagging the root ebs volume
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed 's/[a-z]$//'`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            ROOT_VOLUME_IDS=$(aws ec2 describe-instances --region $AWS_REGION --instance-id $AWS_INSTANCE_ID --output text --query Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId)
            aws ec2 create-tags --resources $ROOT_VOLUME_IDS --region $AWS_REGION --tags Key=Name,Value=\"${AWS::StackName}-bootnode-volume\"           
            
            # Prepareing for workspace
            export INSTALLER_HOME=/mnt/openshift
            mkdir -p $INSTALLER_HOME
            export GIT_CLONE_DIR=$INSTALLER_HOME/zmodstack-deploy
            mkdir -p $GIT_CLONE_DIR

            # Clone git repo containing automation scripts for AWS
            git clone --no-checkout -b release-2023.4.1 https://github.com/IBM/zmodstack-deploy.git $GIT_CLONE_DIR
            cd $GIT_CLONE_DIR && git sparse-checkout set aws ocp && git checkout @
            source $GIT_CLONE_DIR/aws/scripts/bootnode-bootstrap.sh

            # Begin OCP cluster Installation
            cd $GIT_CLONE_DIR/ocp/ansible/
            aws s3 cp s3://${S3BucketName}/zmodstack/ocp/pull-secret.json ./playbooks/pull-secret
            clustername_lower=$(echo ${ClusterName} | tr '[:upper:]' '[:lower:]')
            JSON_STRING=$(jq -n \
            --arg access_key_id "${IAMUserAccessKey}" \
            --arg secret_access_key "${IAMUserSecret}" \
            --arg region "${AWS::Region}" \
            --arg stack_name "${AWS::StackName}" \
            --arg az "${AZ}" \
            --arg private_cluster "${PrivateCluster}" \
            --arg public_ssh_key "`cat /mnt/.ssh/id_rsa.pub`" \
            --arg base_domain "${DomainName}" \
            --arg cluster_name "$clustername_lower" \
            --arg openshift_version "${OpenshiftVersion}" \
            --arg openshift_username "${OpenshiftUsername}" \
            --arg openshift_password "${OpenshiftPassword}" \
            --arg external_registry_password "${APIKey}" \
            --arg accept_license "${LicenseAgreement}" \
            --arg vpc_id "${VPCID}" \
            --arg machine_network_cidr "${VPCCIDR}" \
            --arg control_plane_node_subnet1_id "${PublicSubnet1ID}" \
            --arg control_plane_node_subnet2_id "${PublicSubnet2ID}" \
            --arg control_plane_node_subnet3_id "${PublicSubnet3ID}" \
            --arg computenode_subnet1_id "${PrivateSubnet1ID}" \
            --arg computenode_subnet2_id "${PrivateSubnet2ID}" \
            --arg computenode_subnet3_id "${PrivateSubnet3ID}" \
            --arg vpc_cidr "${VPCCIDR}" \
            --arg availability_zone1 "${AvailabilityZone1}" \
            --arg availability_zone2 "${AvailabilityZone2}" \
            --arg availability_zone3 "${AvailabilityZone3}" \
            --arg control_plane_node_instance_type "${ControlPlaneNodeInstanceType}" \
            --arg control_plane_node_replica_count ${NumberOfControlPlaneNode} \
            --arg computenode_instance_type "${ComputeInstanceType}" \
            --arg computenode_replica_count ${NumberOfCompute} \
            --arg autoscaler "false" \
            --arg zoscb ${ZosCloudBroker} \
            --arg zosconnect ${ZosConnect} \
            --arg wazidevspaces ${WaziDevspaces} \
            --arg wazidevspacesversion ${WaziDevspacesVersion} \
            '{ access_key_id: $access_key_id, secret_access_key: $secret_access_key, region: $region, stack_name: $stack_name, az: $az, machine_network_cidr: $machine_network_cidr, private_cluster: $private_cluster, public_ssh_key: $public_ssh_key, base_domain: $base_domain, cluster_name: $cluster_name, openshift_version: $openshift_version, openshift_username: $openshift_username, openshift_password: $openshift_password, external_registry_password: $external_registry_password, accept_license: $accept_license, vpc_id: $vpc_id, control_plane_node_subnet1_id: $control_plane_node_subnet1_id, control_plane_node_subnet2_id: $control_plane_node_subnet2_id, control_plane_node_subnet3_id: $control_plane_node_subnet3_id, computenode_subnet1_id: $computenode_subnet1_id, computenode_subnet2_id: $computenode_subnet2_id, computenode_subnet3_id: $computenode_subnet3_id, vpc_cidr: $vpc_cidr, availability_zone1: $availability_zone1, availability_zone2: $availability_zone2, availability_zone3: $availability_zone3, control_plane_node_instance_type: $control_plane_node_instance_type, control_plane_node_replica_count: $control_plane_node_replica_count, computenode_instance_type: $computenode_instance_type, computenode_replica_count: $computenode_replica_count, autoscaler: $autoscaler, zoscb: $zoscb, zosconnect: $zosconnect, wazidevspaces: $wazidevspaces, wazidevspacesversion: $wazidevspacesversion }')
            printf '%s\n' "$JSON_STRING" > $GIT_CLONE_DIR/ocp/ansible/extravars.json
            pip3 install --user -r $GIT_CLONE_DIR/ocp/ansible/requirements.txt            

            # Run ansible playbooks to install OCP and set cloudformation ecode
            ansible-galaxy collection install -r $GIT_CLONE_DIR/ocp/ansible/requirements.yml
            cd $GIT_CLONE_DIR/ocp/ansible && ansible-playbook playbooks/ocp-install.yaml --extra-vars "@extravars.json" 
            ecode=$?

            # Run ansible playbooks to install IBM Z & Cloud Modernization Stack component/product Operators
            cd $GIT_CLONE_DIR/ocp/ansible && ansible-playbook playbooks/main.yaml --extra-vars "@extravars.json" 

            # Copy values logs to S3
            aws s3 cp /var/log/cloud-init-output.log s3://${S3BucketName}/zmodstack/logs/${AWS::StackName}_cloud-init-output.log
            
            # send completion signal
            ln -s /aws-cfn-bootstrap-2.0/cfnbootstrap /usr/lib/python3.8/site-packages/cfnbootstrap
            cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at ${S3BucketName}" $InstallCompleteURL
          -
            IAMUserAccessKey: !Ref IAMUserAccessKey
            IAMUserSecret: !GetAtt [IAMUserAccessKey, SecretAccessKey]
            LicenseAgreement: !If [ AcceptLicense, 'accept', 'reject']
            AZ: !If [ 3AZConditionCheck, 'multi_zone', 'single_zone']
            AvailabilityZone1: !Select [0, !Ref AvailabilityZones]
            AvailabilityZone2: !If [ 3AZConditionCheck, !Select [1, !Ref AvailabilityZones], ""]
            AvailabilityZone3: !If [ 3AZConditionCheck, !Select [2, !Ref AvailabilityZones], ""]
  
  CleanUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os
          import traceback
          import time
          def handler(event, context):
              responseData = {}
              try:
                  print("event_obj:",json.dumps(event))
                  print(event['RequestType'])
                  if event['RequestType'] == 'Delete':
                    print("Run unsubscribe script")
                    ssm = boto3.client('ssm',region_name=os.environ['Region'])
                    instanceID = os.environ['BootNode']
                    stackname = os.environ['StackName']
                    print(instanceID)
                    response = ssm.send_command(Targets=[{"Key":"instanceids","Values":[instanceID]}],
                            DocumentName="AWS-RunShellScript",
                            Parameters={"commands":["/mnt/destroy.sh %s" %(stackname)],
                                        "executionTimeout":["1200"],
                                        "workingDirectory":["/mnt"]},
                            Comment="Execute script in uninstall openshift",
                            TimeoutSeconds=120)
                    print(response)
                    current_status = "WAIT"
                    final_status = "READY"
                    parameterName = stackname+"_CleanupStatus"
                    response = ssm.put_parameter(Name=parameterName,
                           Description="Waiting for CleanupStatus to be READY",
                           Value=current_status,
                           Type='String',
                           Overwrite=True)
                    print(response)
                    while(current_status!=final_status):
                      time.sleep(30)
                      response = ssm.get_parameter(Name=parameterName)
                      parameter = response.get('Parameter')
                      current_status = parameter.get('Value')
                      print(current_status)
                    ssm.delete_parameter(Name=parameterName)
              except Exception as e:
                print(e)
                traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
      Environment:
        Variables:
          Region: !Ref AWS::Region
          BootNode: !Ref BootnodeInstance
          StackName: !Ref AWS::StackName
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 600

  Cleanup :
    Type: Custom::Cleanup
    Properties:
      DependsOn: BootnodeInstance
      ServiceToken: !GetAtt 'CleanUpLambda.Arn'

  InstallCompleteHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  InstallCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref InstallCompleteHandle
      Timeout: '7200'

Outputs:
  BootnodeInstanceId:
    Description: Bootnode Instance ID.
    Value: !Ref BootnodeInstance

  BootnodePublicIp:
    Description: The boot node public IP address.
    Value: !GetAtt BootnodeInstance.PublicIp

  OpenshiftConsole:
    Description: The URL for the OpenShift UI.
    Value: !GetAtt OpenshiftURL.Value

  OpenshiftUsername:
    Description: OpenShift username secret.
    Value: !Ref OpenshiftSecret

  OpenshiftPassword:
    Description: OpenShift password secret.
    Value: !Ref OpenshiftSecret

  WaziDevspacesConsole:
    Description: The URL for the Wazi Devspaces UI.
    Condition: WaziDevspacesCheck
    Value: !GetAtt WaziDevspacesURL.Value
