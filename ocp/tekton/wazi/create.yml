---
- name: Conditional flush cache
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Clear cache if we have changed the target zone
      when: (cache_zone is undefined) or (zone != cache_zone)
      ansible.builtin.meta: clear_facts

- name: Create IBM Cloud VPC VSI
  hosts: localhost
  environment:
    IC_REGION: "{{ region }}"
  vars:
    os_type: zos
    name_prefix: "zmodstack-deploy"
    instance:
      name: "{{ name_prefix }}-zvsi"
      profile: mz2o-2x16
      image: .*zos.*
      username: IBMUSER
      python_interpreters:
        - /usr/lpp/IBM/cyp/v3r9/pyz/bin/python3
        - /usr/lpp/IBM/cyp/v3r8/pyz/bin/python3
    ssh_key_name: "{{ ansible_user_id | lower }}"
    ssh_public_key: "{{lookup('file', '~/.ssh/ibmcloud.pub') }}"
    region: "eu-gb"
    zone: "{{region}}-1"
    cache_vsi: false
    resource_group: "8d923eb7bb0a450baa9bafb46aba797e"
    total_ipv4_address_count: 256
  tasks:
    - name: Save zone as fact
      ansible.builtin.set_fact:
        cacheable: true
        cache_zone: "{{ zone }}"

    - name: Create VPC
      when: vpc is undefined
      ibm.cloudcollection.ibm_is_vpc:
        name: "{{ name_prefix }}-vpc"
        state: available
        id: "{{ vpc.id | default(omit) }}"
        resource_group: "{{ resource_group }}"
      register: vpc_create_output

    - name: Configure Security Group Rule to open SSH and web server on the VSI
      when: vpc is undefined
      ibm.cloudcollection.ibm_is_security_group_rule:
        state: available
        group: "{{ vpc_create_output.resource.default_security_group }}"
        direction: inbound
        remote: 0.0.0.0/0
        # tcp:
        #   - port_max: 22
        #     port_min: 22
        #   - port_max: 80
        #     port_min: 80
        #   - port_max: 443
        #     port_min: 443

    - name: Save VPC as fact
      when: vpc is undefined
      ansible.builtin.set_fact:
        cacheable: true
        vpc: "{{ vpc_create_output.resource }}"

    - name: Create VPC Subnet
      when: subnet is undefined
      ibm.cloudcollection.ibm_is_subnet:
        name: "{{ name_prefix }}-{{ zone }}"
        state: available
        id: "{{ subnet.id | default(omit) }}"
        vpc: "{{ vpc.id }}"
        total_ipv4_address_count: "{{ total_ipv4_address_count }}"
        zone: "{{ zone }}"
        resource_group: "{{ resource_group }}"
      register: subnet_create_output

    - name: Save VPC Subnet as fact
      when: subnet is undefined
      ansible.builtin.set_fact:
        cacheable: true
        subnet: "{{ subnet_create_output.resource }}"

    - name: Upload SSH Key
      when: ssh_key is undefined
      ibm.cloudcollection.ibm_is_ssh_key:
        name: "{{ ssh_key_name }}"
        public_key: "{{ ssh_public_key }}"
        id: "{{ ssh_key.id | default(omit) }}"
        resource_group: "{{ resource_group }}"
      register: ssh_key_create_output

    - name: Save SSH Key as fact
      when: ssh_key is undefined
      ansible.builtin.set_fact:
        cacheable: true
        ssh_key: "{{ ssh_key_create_output.resource }}"

    ## FIXME - ibm_is_images_info doesn't return anything!
    #
    #
    # - name: Retrieve image list
    #   # when: image_dict is undefined
    #   ibm_is_images_info:
    #     # resource_group: "{{ resource_group }}"
    #   register: images_list
    # - name: show image_dict
    #   debug:
    #     var: images_list
    # - name: Set VM image name/id dictionary fact
    #   when: image_dict is undefined
    #   set_fact:
    #     cacheable: True
    #     image_dict: "{{ images_list.resource.images |
    #                     items2dict(key_name='name', value_name='id') }}"
    # - name: show image_dict
    #   debug:
    #     var: image_dict

    - name: Create VSI
      when: (vsi is undefined) or (vsi == None) or (not cache_vsi)
      ibm.cloudcollection.ibm_is_instance:
        name: "{{ instance.name }}"
        state: available
        id: "{{ vsi.id | default(omit) }}"
        vpc: "{{ vpc.id }}"
        profile: "{{ instance.profile }}"
        # image: "{{ (image_dict|dict2items|selectattr('key', 'match', instance.image)|list|last).value }}"
        image: r018-6d668004-2cdf-47ee-8efe-abbe8b8b578a
        keys:
          - "{{ ssh_key.id }}"
        primary_network_interface:
          - subnet: "{{ subnet.id }}"
        zone: "{{ zone }}"
        resource_group: "{{ resource_group }}"
      register: vsi_create_output

    - name: Save VSI as fact
      when: vsi_create_output.resource is defined
      ansible.builtin.set_fact:
        cacheable: true
        vsi: "{{ vsi_create_output.resource }}"

    - name: Configure Floating IP Address
      when: (fip is undefined) or (fip == None) or (not cache_vsi)
      ibm.cloudcollection.ibm_is_floating_ip:
        name: "{{ name_prefix }}-fip"
        state: available
        id: "{{ fip.id | default(omit) }}"
        target: "{{ vsi.primary_network_interface[0]['id'] }}"
        resource_group: "{{ resource_group }}"
      register: fip_create_output

    - name: Save Floating IP as fact
      when: fip_create_output.resource is defined
      ansible.builtin.set_fact:
        cacheable: true
        fip: "{{ fip_create_output.resource }}"

    - name: Print Floating IP Address
      ansible.builtin.debug:
        msg: "IP Address: {{ fip.address }}"

    - name: Add VSI to Ansible inventory
      ansible.builtin.add_host:
        name: "{{ fip.address }}"
        ansible_user: "{{instance.username | default('root')}}"
        groups: new_vsi
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
        ansible_interpreter_python_fallback: "{{instance.python_interpreters | default(omit)}}"

- name: Check Ansible connection to new VSI
  hosts: new_vsi
  gather_facts: false
  tasks:
    - name: Wait for VSI to become reachable over SSH
      ansible.builtin.wait_for_connection: