---
- name: Save zone as fact
  ansible.builtin.set_fact:
    cacheable: true
    cache_zone: "{{ zone }}"

- name: Create Resource Group
  when: resource_group_name is defined
  ibm.cloudcollection.ibm_resource_group:
    name: "{{ resource_group_name }}"
    state: available
  register: ibm_resource_group_output

- name: Create VPC
  when: vpc is undefined
  ibm.cloudcollection.ibm_is_vpc:
    name: "{{ name_prefix }}-vpc"
    state: available
    id: "{{ vpc.id | default(omit) }}"
    resource_group: "{{ ibm_resource_group_output.resource.id | default(omit) }}"
  register: vpc_create_output

- name: Configure Security Group Rule to open SSH and web server on the VSI
  when: vpc is undefined
  ibm.cloudcollection.ibm_is_security_group_rule:
    state: available
    group: "{{ vpc_create_output.resource.default_security_group }}"
    direction: inbound
    remote: 0.0.0.0/0
    tcp:
      - port_max: 22
        port_min: 22
      # - port_max: 992
      #   port_min: 992

- name: Save VPC as fact
  when: vpc is undefined
  ansible.builtin.set_fact:
    cacheable: true
    vpc: "{{ vpc_create_output.resource }}"

- name: Create VPC Subnets
  when: subnet is undefined
  ibm.cloudcollection.ibm_is_subnet:
    name: "{{ name_prefix }}-{{ region }}-{{ item }}"
    state: available
    id: "{{ subnet.id | default(omit) }}"
    vpc: "{{ vpc.id }}"
    total_ipv4_address_count: "{{ total_ipv4_address_count }}"
    zone: "{{ zone }}-{{ item }}"
    resource_group: "{{ vpc.resource_group }}"
  with_sequence: start=1 end=3
  register: subnet_create_output

- name: set VM Subnets as a list
  when: subnet is undefined
  ansible.builtin.set_fact:
    cacheable: true
    subnets: "{{ subnet_create_output.results | map(attribute='resource') | list }}"

- name: Upload SSH Key
  when: ssh_key is undefined
  ibm.cloudcollection.ibm_is_ssh_key:
    name: "{{ ssh_key_name }}"
    public_key: "{{ ssh_public_key }}"
    id: "{{ ssh_key.id | default(omit) }}"
    resource_group: "{{ vpc.resource_group }}"
  register: ssh_key_create_output

- name: Save SSH Key as fact
  when: ssh_key is undefined
  ansible.builtin.set_fact:
    cacheable: true
    ssh_key: "{{ ssh_key_create_output.resource }}"

- name: Retrieve image list
  when: image_dict is undefined
  ibm.cloudcollection.ibm_is_images_info:
  register: images_list

- name: Set VM image name/id dictionary fact
  when: image_dict is undefined
  ansible.builtin.set_fact:
    cacheable: true
    image_dict: "{{ images_list.resource.images |
                    items2dict(key_name='name', value_name='id') }}"

- name: Retrieve snapshot list
  when: snapshots_list is undefined
  ibm.cloudcollection.ibm_is_snapshots_info:
    region: "{{ region }}"
  register: snapshots_list

- name: Set snapshot name/id dictionary fact
  when: snapshots_list is defined and snapshots_list.resource.snapshots | length > 0
  ansible.builtin.set_fact:
    cacheable: true
    snapshot_dict: "{{ snapshots_list.resource.snapshots |
                    items2dict(key_name='name', value_name='id') }}"

- name: Create Data Volume from Snapshot
  when: (data_volume is undefined) or (data_volume == None) or (not cache_data_volume)
  ibm.cloudcollection.ibm_is_volume:
    source_snapshot: "{{ (snapshot_dict | dict2items | selectattr('key', 'match', data_volume_snapshot) | list | first).value }}"
    name: "{{ data_volume_name }}"
    profile: "{{ data_volume_profile }}"
    capacity: "{{ data_volume_capacity }}"
    zone: "{{ zone }}"
    resource_group: "{{ vpc.resource_group }}"
    region: "{{ region }}"
  register: data_volume_create_output

- name: Save Data Volume as fact
  when: data_volume_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    data_volume: "{{ data_volume_create_output.resource }}"

- name: Create VSI
  when: (vsi is undefined) or (vsi == None) or (not cache_vsi)
  ibm.cloudcollection.ibm_is_instance:
    name: "{{ instance.name }}"
    state: available
    id: "{{ vsi.id | default(omit) }}"
    vpc: "{{ vpc.id }}"
    profile: "{{ instance.profile }}"
    image: "{{ (image_dict | dict2items | selectattr('key', 'match', instance.image) | list | first).value }}"
    keys:
      - "{{ ssh_key.id }}"
    primary_network_interface:
      - subnet: "{{ subnets[0].id }}"
    volumes:
      - "{{ data_volume.id }}"
    auto_delete_volume: "{{delete_volume_on_instance_delete}}"
    zone: "{{ zone }}"
    resource_group: "{{ vpc.resource_group }}"
  register: vsi_create_output

- name: Save VSI as fact
  when: vsi_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    vsi: "{{ vsi_create_output.resource }}"

- name: Configure Floating IP Address
  when: (fip is undefined) or (fip == None) or (not cache_vsi)
  ibm.cloudcollection.ibm_is_floating_ip:
    name: "{{ name_prefix }}-fip"
    state: available
    id: "{{ fip.id | default(omit) }}"
    target: "{{ vsi.primary_network_interface[0]['id'] }}"
    resource_group: "{{ vpc.resource_group }}"
  register: fip_create_output

- name: Save Floating IP as fact
  when: fip_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    fip: "{{ fip_create_output.resource }}"

- name: Write IP to File
  when: fip_create_output.resource is defined
  copy: content="{{ fip.address }}" dest="{{ path_workspace }}/ip-address.txt"

- name: Print Floating IP Address
  ansible.builtin.debug:
    msg: "IP Address: {{ fip.address }}"

- name: Add VSI to Ansible inventory
  ansible.builtin.add_host:
    name: "{{ fip.address }}"
    ansible_user: "{{ instance.username | default('root') }}"
    groups: new_vsi
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_interpreter_python_fallback: "{{ instance.python_interpreters | default(omit) }}"

# TODO - Check once zvsi has ssh enabled by default
# - name: Wait for VSI to become reachable over SSH
#   ansible.builtin.wait_for_connection:
#   delegate_to: "{{ fip.address }}"