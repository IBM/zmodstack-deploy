---

##TODO: Add sshpass to image. Only installing if on openshift. Comment out when running locally.
- name: install sshpass
#  when: ansible_distribution == 'openshift'
  command: microdnf install sshpass -y

##TODO: Add ssh-copy-id to image. Only installing if on openshift. Comment out when running locally.
- name: install ssh-copy-id
#  when: ansible_distribution == 'openshift'
  command: microdnf install openssh-clients -y

- name: Save zone as fact
  ansible.builtin.set_fact:
    # cacheable: true
    cache_zone: "{{ zone }}"

- name: Create Resource Group
  when: resource_group_name is defined
  ibm.cloudcollection.ibm_resource_group:
    name: "{{ resource_group_name }}"
    state: available
  register: ibm_resource_group_output

- name: Create VPC
  when: vpc is undefined
  ibm.cloudcollection.ibm_is_vpc:
    name: "{{ name_prefix }}-vpc"
    state: available
    id: "{{ vpc.id | default(omit) }}"
    resource_group: "{{ ibm_resource_group_output.resource.id | default(omit) }}"
  register: vpc_create_output

- name: Configure Security Group Rule to open SSH and web server on the VSI
  when: vpc is undefined
  ibm.cloudcollection.ibm_is_security_group_rule:
    state: available
    group: "{{ vpc_create_output.resource.default_security_group }}"
    direction: inbound
    remote: 0.0.0.0/0
    tcp:
      - port_max: 23
        port_min: 22

- name: Save VPC as fact
  when: vpc is undefined
  ansible.builtin.set_fact:
    cacheable: true
    vpc: "{{ vpc_create_output.resource }}"

- name: Create VPC Subnets
  when: subnets is undefined
  ibm.cloudcollection.ibm_is_subnet:
    name: "{{ name_prefix }}-{{ region }}-{{ item }}"
    state: available
    id: "{{ subnet.id | default(omit) }}"
    vpc: "{{ vpc.id }}"
    total_ipv4_address_count: "{{ total_ipv4_address_count }}"
    zone: "{{ region }}-{{ item }}"
    resource_group: "{{ vpc.resource_group }}"
  with_sequence: start=1 end=3
  register: subnet_create_output

- name: set VM Subnets as a list
  when: subnets is undefined
  ansible.builtin.set_fact:
    cacheable: true
    subnets: "{{ subnet_create_output.results | map(attribute='resource') | list }}"

- name: Upload SSH Key
  when: ssh_key is undefined
  ibm.cloudcollection.ibm_is_ssh_key:
    region: "{{ region }}"
    name: "{{ ssh_key_name }}"
    public_key: "{{ ssh_public_key.split()[:2]|join(' ') }}"
    id: "{{ ssh_key.id | default(omit) }}"
    resource_group: "{{ vpc.resource_group }}"
  register: ssh_key_create_output

- name: Save SSH Key as fact
  when: ssh_key is undefined
  ansible.builtin.set_fact:
    cacheable: true
    ssh_key: "{{ ssh_key_create_output.resource }}"

- name: Retrieve image list
  when: image_dict is undefined
  ibm.cloudcollection.ibm_is_images_info:
    resource_group: "{{ vpc.resource_group }}"
    region: "{{ region }}"
  register: images_list

- name: Set VM image name/id dictionary fact
  when: image_dict is undefined
  ansible.builtin.set_fact:
    cacheable: true
    image_dict: "{{ images_list.resource.images |
                    items2dict(key_name='name', value_name='id') }}"

- name: Retrieve snapshot list
  when: snapshots_list is undefined
  ibm.cloudcollection.ibm_is_snapshots_info:
    region: "{{ region }}"
  register: snapshots_list

- name: Set snapshot name/id dictionary fact
  when: snapshots_list is defined and snapshots_list.resource.snapshots | length > 0
  ansible.builtin.set_fact:
    cacheable: true
    snapshot_dict: "{{ snapshots_list.resource.snapshots |
                    items2dict(key_name='name', value_name='id') }}"

# - name: Create Boot Volume
#   # when: (data_volume is undefined) or (data_volume == None) or (not cache_data_volume)
#   ibm.cloudcollection.ibm_is_volume:
#     # source_snapshot: "{{ (snapshot_dict | dict2items | selectattr('key', 'match', data_volume_snapshot) | list | first).value }}"
#     name: "{{ instance.name }}-boot"
#     profile: "general-purpose"
#     capacity: 10
#     zone: "{{ zone }}"
#     resource_group: "{{ vpc.resource_group }}"
#     region: "{{ region }}"
#   register: boot_volume_create_output

# - name: Save Boot Volume as fact
#   when: boot_volume_create_output.resource is defined
#   ansible.builtin.set_fact:
#     cacheable: true
#     boot_volume: "{{ boot_volume_create_output.resource }}"

- name: Create Data Volume from Snapshot
  # when: (data_volume is undefined) or (data_volume == None) or (not cache_data_volume)
  ibm.cloudcollection.ibm_is_volume:
    source_snapshot: "{{ (snapshot_dict | dict2items | selectattr('key', 'match', data_volume_snapshot) | list | first).value }}"
    name: "{{ data_volume_name }}"
    profile: "{{ data_volume_profile }}"
    capacity: "{{ data_volume_capacity }}"
    zone: "{{ zone }}"
    resource_group: "{{ vpc.resource_group }}"
    region: "{{ region }}"
  register: data_volume_create_output

- name: Save Data Volume as fact
  when: data_volume_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    data_volume: "{{ data_volume_create_output.resource }}"

- name: Create VSI
  when: (vsi is undefined) or (vsi == None)
  ibm.cloudcollection.ibm_is_instance:
    name: "{{ instance.name }}"
    state: available
    id: "{{ vsi.id | default(omit) }}"
    vpc: "{{ vpc.id }}"
    profile: "{{ instance.profile }}"
    image: "{{ (image_dict | dict2items | selectattr('key', 'match', instance.image) | list | first).value }}"
    # image: r014-b01b36b9-1cd5-4205-958e-842e2a7063b4
    keys:
      - "{{ ssh_key.id }}"
    primary_network_interface:
      - subnet: "{{ subnets[1].id }}"
        name: "{{ primary_network_interface_name }}"
    # boot_volume:
    #   - id: "{{ boot_volume.id }}"
    #     name: "{{ instance.name }}-boot"
    # volumes:
    #   - "{{ data_volume.id }}"
    auto_delete_volume: "{{delete_volume_on_instance_delete}}"
    zone: "{{ zone }}"
    resource_group: "{{ vpc.resource_group }}"
  register: vsi_create_output

- name: Save VSI as fact
  when: vsi_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    vsi: "{{ vsi_create_output.resource }}"

- name: Attach Data Volume
  ibm.cloudcollection.ibm_is_instance_volume_attachment:
    instance: "{{ vsi.id }}"
    name: "{{ data_volume.name }}"
    volume: "{{ data_volume.id }}"
    delete_volume_on_attachment_delete: true
    delete_volume_on_instance_delete: true
  register: vsi_create_output

- name: Stop the VSI
  ibm.cloudcollection.ibm_is_instance_action:
    instance: "{{ vsi.id }}"
    action: stop
    # force_action: true

# - name: Force Stop the VSI
#   ibm.cloudcollection.ibm_is_instance_action:
#     instance: "{{ vsi.id }}"
#     action: stop
#     force_action: true

- name: Restart the VSI
  when: vsi_create_output.changed and vsi is defined
  ibm.cloudcollection.ibm_is_instance_action:
    instance: "{{ vsi.id }}"
    action: start
    # force_action: true

- name: Configure Floating IP Address
  when: (fip is undefined) or (fip == None)
  ibm.cloudcollection.ibm_is_floating_ip:
    name: "{{ name_prefix }}-fip"
    state: available
    id: "{{ fip.id | default(omit) }}"
    region: "{{ region }}"
    target: "{{ vsi.primary_network_interface[0]['id'] }}"
    resource_group: "{{ vpc.resource_group }}"
  register: fip_create_output

- name: Save Floating IP as fact
  when: fip_create_output.resource is defined
  ansible.builtin.set_fact:
    cacheable: true
    fip: "{{ fip_create_output.resource }}"

- name: Print Floating IP Address
  ansible.builtin.debug:
    msg: "IP Address: {{ fip.address }}"

- name: Write IP to File
  when: fip_create_output.resource is defined
  copy: content="{{ fip.address }}" dest="{{ path_workspace }}/ip-address.txt"


- name: Add VSI to Ansible inventory
  when: fip.address not in groups['new_vsi'] | default([])
  ansible.builtin.add_host:
     name: "{{ fip.address }}"
     ansible_user: "{{ instance.username | default('root') }}"
     ansible_password: "{{ssh_password}}"
     groups: new_vsi
     ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
     ansible_interpreter_python_fallback: "{{ instance.python_interpreters | default(omit) }}"

- name: Wait for VSI to become reachable over SSH
  delegate_to: "{{ fip.address }}"
  ansible.builtin.wait_for_connection:
    connect_timeout: 60
    delay: 3
    timeout: 600

- name: Copy SSH public key to remote host
  command: >
    sshpass -f {{ ssh_password_file }}
    ssh-copy-id
    -i {{ ssh_public_path }}
    -o StrictHostKeyChecking=no
    {{ instance.username }}@{{ fip.address }}
#
##- name: zos copy ssh key
##  delegate_to: "{{ fip.address }}"
##  ibm.ibm_zos_core.zos_copy:
##    src: "~/.ssh/zmodstack-deploy.pub"
##    dest: /u/ibmuser/.ssh
##    mode: '0644'
##    encoding:
##      from: 'ISO8859-1'
##      to: 'IBM-1047'