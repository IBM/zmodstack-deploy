---
- include_vars: zosconnect.yml

# tasks file for zosconnect
# Create namespace for zos connect 
- name: "Create project with Native YAML API - IBM Z/OS Connect"
  kubernetes.core.k8s:
    state: present
    src: "files/project.yaml"

- name: "Create Operator Group with Native YAML API - IBM Z/OS Connect"
  kubernetes.core.k8s:
    state: present
    namespace: "ibm-zmodstack-zosconnect"
    src: "files/operator-group.yaml"

- name: "Create Z/os Connect Subscription with Native YAML API - IBM Z/OS Connect"
  kubernetes.core.k8s:
    state: present
    namespace: "openshift-operators"
    src: "files/zosconnect-subscription.yaml"

#install z/os connect in openshift-operators namespace to install by default on all namespaces
- name: "Retrieve Z/os connect subscription info"
  kubernetes.core.k8s_info:
    kind: Subscription
    namespace: "openshift-operators"
    name: "{{ zosconnect_subscription.name }}"
    api_version: "{{ zosconnect_subscription.apiVersion }}"
  register: zosconnect_subscription_info
  until:
    - "zosconnect_subscription_info.resources is defined and zosconnect_subscription_info.resources | length > 0"
    - "'state' in zosconnect_subscription_info.resources[0].status and zosconnect_subscription_info.resources[0].status.state == 'AtLatestKnown'"
  retries: 30
  delay: 10

- name: "Verify IBM Z/OS Connect subscription: '{{ zosconnect_subscription.name }}'"
  ansible.builtin.assert:
    that:
      - zosconnect_subscription_info.resources[0].metadata.creationTimestamp != ""
      - zosconnect_subscription_info.resources[0].status.installplan.kind == "InstallPlan"
      - zosconnect_subscription_info.resources[0].status.installplan.name != ""
      - zosconnect_subscription_info.resources[0].status.state == "AtLatestKnown"
      - zosconnect_subscription_info.resources[0].status.conditions[0].reason == "AllCatalogSourcesHealthy"

######################################################################
## Logic to run zos-connect via wazi devspaces with a sampke cics app

# clone zosconnect designer image 
- name: Pull ZosConnect designer Docker image
  containers.podman.podman_image:
    name: 'icr.io/zosconnect/ibm-zcon-designer:{{ designer_image_version }}'
    tag: '{{ designer_image_version }}'
    pull: True

# clone zosconnect server image
# download the global-pull secret
- name: Download the Global-pull secret
  ansible.builtin.shell: |
    oc get secret/pull-secret -n openshift-config --template='{{ '{{' }} index .data ".dockerconfigjson" | base64decode {{ '}}' }}' > /tmp/global-pull-secret-download.json

#extract api key from global pull secret for cp.icr.io
- name: extract the API key for cp.icr.io 
  ansible.builtin.shell: |
    jq -r '.auths."cp.icr.io".password' /tmp/global-pull-secret-download.json
  register: jq_output

- name: Setfact the apikey to be used to pull server image
  set_fact:
    apikeynew={{ jq_output.stdout }}

- name: Pull Z/OS Connect server Docker image
  containers.podman.podman_image:
    name: 'cp.icr.io/cp/zosconnect/ibm-zcon-server:{{ server_image_version }}'
    tag: '{{ server_image_version }}'
    username: "{{ registry_username }}"
    password: "{{ apikeynew }}"
    pull: True 
  
- name: Create API project workspace directory - IBM Z/OS Connect
  ansible.builtin.file:
    path: "{{ project_workspace }}"
    state: directory

- name: Create subdirectories for sample Liberty server config - IBM Z/OS Connect
  ansible.builtin.file:
    path: "{{ project_workspace }}/CatalogManagerApi/src/main/liberty/config"
    state: directory

- name: Create certs dir in workspace directory - IBM Z/OS Connect
  ansible.builtin.file:
    path: "{{ project_workspace }}/certs"
    state: directory

- name: Create logs dir in workspace directory - IBM Z/OS Connect
  ansible.builtin.file:
    path: "{{ project_workspace }}/logs"
    state: directory

- name: Create server configuration file - IBM Z/OS Connect
  ansible.builtin.template:
    src: files/cics.xml.j2
    dest: "{{ project_workspace }}/CatalogManagerApi/src/main/liberty/config/cics.xml"

- name: Create devfile.yaml - IBM Z/OS Connect
  ansible.builtin.template:
    src: files/devfile.yaml.j2
    dest: "{{ project_workspace }}/CatalogManagerApi/devfile.yaml"

- name: Create api dir in workspace directory - IBM Z/OS Connect
  ansible.builtin.file:
    path: "{{ project_workspace }}/src/main/api"
    state: directory

- name: Copy the sample api - IBM Z/OS Connect
  ansible.builtin.copy:
    src: sample-api.yaml
    dest: "{{ project_workspace }}/src/main/api/sample-api.yaml"

- name: Create docker-compose.yaml - IBM Z/OS Connect Designer
  ansible.builtin.template:
    src: files/docker-compose.yaml.j2
    dest: "{{ project_workspace }}/docker-compose.yaml"
